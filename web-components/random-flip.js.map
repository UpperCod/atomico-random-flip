{"version":3,"file":"random-flip.js","sources":["../src/web-components/random-flip/random-flip.js"],"sourcesContent":["import {\r\n  h,\r\n  customElement,\r\n  useRef,\r\n  useEffect,\r\n  useProp,\r\n  useEvent\r\n} from \"atomico\";\r\nimport \"../web-grid/web-grid\";\r\n\r\nconst RandomFlip = props => {\r\n  const [initialWorld] = useProp(\"initialWorld\");\r\n  const [tick] = useProp(\"tick\");\r\n  const [active] = useProp(\"active\");\r\n\r\n  const ref = useRef();\r\n\r\n  const dispatchDone = useEvent(\"done\", { bubles: true, composed: true });\r\n  const { cols, rows } = initialWorld;\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      if (active) {\r\n        randomFlipCell(ref, dispatchDone, cols, rows);\r\n      }\r\n    }, tick);\r\n    return () => clearInterval(timer);\r\n  }, [active]);\r\n\r\n  return (\r\n    <host\r\n      shadowDom\r\n      ref={ref}\r\n      onworldchange={handleWorldChange(ref, dispatchDone)}\r\n    >\r\n      <web-grid world={initialWorld} />\r\n    </host>\r\n  );\r\n};\r\n\r\nRandomFlip.props = {\r\n  initialWorld: {\r\n    type: Object,\r\n    get value() {\r\n      return { arr: [false], cols: 1, rows: 1 };\r\n    }\r\n  },\r\n  tick: {\r\n    type: Number,\r\n    get value() {\r\n      return 1000;\r\n    }\r\n  },\r\n  active: {\r\n    type: Boolean,\r\n    get value() {\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\nexport default customElement(\"random-flip\", RandomFlip);\r\n\r\n/*  Helpers */\r\n// transform the world by toggling state of the cell at (col, row)\r\nconst toggleCell = ({ world, col, row }) => {\r\n  const { arr, cols, rows } = world;\r\n  const newArr = arr.slice();\r\n  newArr[row * cols + col] = !arr[row * cols + col];\r\n  return { arr: newArr, rows: rows, cols: cols };\r\n};\r\n\r\n// is world done?\r\nconst isDone = world => {\r\n  const { rows, cols, arr } = world;\r\n  const sum = arr.reduce((prev, cur) => (cur ? prev + 1 : prev), 0);\r\n  return !!(sum === 0 || sum === rows * cols);\r\n};\r\n\r\n// get the web-grid component (the only one)\r\nconst getWebGrid = ref => ref.current.shadowRoot.children[0];\r\n\r\n// handle 'worldchange' event: a cell needs toggle\r\n// if done after change, raise 'done' event\r\nconst handleWorldChange = (ref, dispatchDone) => e => {\r\n  const webGrid = getWebGrid(ref);\r\n  webGrid.world = toggleCell(e.detail);\r\n  if (isDone(webGrid.world)) dispatchDone();\r\n};\r\n\r\n// random pick a cell and raise 'worldchange' event\r\nconst randomFlipCell = (ref, dispatchDone, cols, rows) => {\r\n  const col = Math.floor(Math.random() * cols);\r\n  const row = Math.floor(Math.random() * rows);\r\n  const world = getWebGrid(ref).world;\r\n  const e = new window.CustomEvent(\"worldchange\", {\r\n    detail: { world, col, row }\r\n  });\r\n\r\n  handleWorldChange(ref, dispatchDone)(e);\r\n};\r\n"],"names":["RandomFlip","props","initialWorld","useProp","tick","active","ref","useRef","dispatchDone","useEvent","bubles","composed","cols","rows","useEffect","timer","setInterval","randomFlipCell","clearInterval","handleWorldChange","type","Object","value","arr","Number","Boolean","customElement","toggleCell","world","col","row","newArr","slice","isDone","sum","reduce","prev","cur","getWebGrid","current","shadowRoot","children","e","webGrid","detail","Math","floor","random","window","CustomEvent"],"mappings":"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"}